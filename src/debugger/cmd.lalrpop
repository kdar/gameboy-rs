use super::ast::Command;
use std::usize;

grammar;

pub cmd: Command = {
  Continue,
  Debug,
  Exit,
  Breakpoint,
  Breakpoints,
  Print,
  Set,
  Step,
};

Breakpoint: Command = {
  "b" <v:hex>
    => Command::Breakpoint(v),
  "break" <v:hex>
    => Command::Breakpoint(v),
};

Breakpoints: Command = {
  "bp"
    => Command::Breakpoints,
  "breakpoints"
    => Command::Breakpoints,
};

Continue: Command = {
  "c" => Command::Continue,
  "continue" => Command::Continue,
};

Debug: Command = {
  "d" => Command::Debug,
  "debug" => Command::Debug,
};

Print: Command = {
  "p" <v:hex>
    => Command::Print(v),
  "print" <v:hex>
    => Command::Print(v),
};

Exit: Command = {
  "q" => Command::Exit,
  "quit" => Command::Exit,
  "exit" => Command::Exit,
};

Set: Command = {
  "set" <k:alphanumeric> <v:hex>
    => Command::Set(k.to_owned(), v),
};

Step: Command = {
  "s" <v:hex?>
    => Command::Step(v),
  "step" <v:hex?>
    => Command::Step(v),
};

space: () = {
  r" +",
};

alphanumeric: &'input str = {
  r"[A-Za-z0-9]+" => <>,
};

hex: usize = {
  <v:alphanumeric> => {
    let mut v = v;
    if v.starts_with("0x") {
      v = &v[2..];
    }
    usize::from_str_radix(v, 16).unwrap()
  },
};
